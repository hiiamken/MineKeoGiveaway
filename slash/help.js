const {
  EmbedBuilder,
  ActionRowBuilder,
  SelectMenuBuilder,
  ComponentType,
} = require("discord.js");
const config = require("../config.json");

module.exports = {
  name: "help",
  description: "üìú Xem t·∫•t c·∫£ c√°c l·ªánh c√≥ s·∫µn cho bot!",
  run: async (client, interaction) => {
    const embed = new EmbedBuilder()
      .setTitle(`C√°c l·ªánh c·ªßa ${client.user.username}`)
      .setColor("#EFB2FB")
      .setDescription(
        "**Vui l√≤ng ch·ªçn m·ªôt danh m·ª•c ƒë·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh trong ƒë√≥**"
      )
      .addFields({
        name: `Links:`,
        value: `- [Discord Server](https://discord.gg/minekeo)\n- [GitHub](https://github.com/hiiamken/MineKeoGiveaway)`,
        inline: true,
      })

      .setTimestamp()
      .setFooter({
        text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username} | ` + config.copyright,
        iconURL: interaction.user.displayAvatarURL(),
      });

    const giveaway = new EmbedBuilder()
      .setTitle("Danh m·ª•c ¬ª Giveaway")
      .setColor("#EFB2FB")
      .setDescription("```yaml\nC√°c l·ªánh Giveaway:```")
      .addFields(
        {
          name: "Create / Start",
          value: `T·∫°o m·ªôt s·ª± ki·ªán giveaway!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "Drop",
          value: `B·∫Øt ƒë·∫ßu s·ª± ki·ªán giveaway!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "Edit",
          value: `Ch·ªânh s·ª≠a m·ªôt s·ª± ki·ªán giveaway ƒëang c√≥!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "End",
          value: `K·∫øt th√∫c m·ªôt s·ª± ki·ªán giveaway!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "List",
          value: `Danh s√°ch t·∫•t c·∫£ giveaway ƒëang c√≥!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "Pause",
          value: `T·∫°m d·ª´ng m·ªôt s·ª± ki·ªán giveaway ƒëang di·ªÖn ra!\n > **Lo·∫°i: __\`slash\`__**`,
          inline: true,
        },
        {
          name: "Reroll",
          value: `Reroll m·ªôt s·ª± ki·ªán giveaway!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "Resume",
          value: `Ti·∫øp t·ª•c m·ªôt s·ª± ki·ªán giveaway!\n > **Lo·∫°i: __\`slash\`__**`,
          inline: true,
        }
      )
      .setTimestamp()
      .setFooter({
        text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username} | ` + config.copyright,
        iconURL: interaction.user.displayAvatarURL(),
      });

    const general = new EmbedBuilder()
      .setTitle("Danh m·ª•c ¬ª Chung")
      .setColor("#EFB2FB")
      .setDescription("```yaml\nC√°c l·ªánh chung:```")
      .addFields(
        {
          name: "Help",
          value: `C√°c l·ªánh hi·ªán c√≥!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "Invite",
          value: `L·∫•y link m·ªùi bot!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        },
        {
          name: "Ping",
          value: `Ki·ªÉm tra ƒë·ªô tr·ªÖ c·ªßa bot!\n > **Lo·∫°i: __\`slash\` / \`message\`__**`,
          inline: true,
        }
      )
      .setTimestamp()
      .setFooter({
        text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username} | ` + config.copyright,
        iconURL: interaction.user.displayAvatarURL(),
      });

    const components = (state) => [
      new ActionRowBuilder().addComponents(
        new SelectMenuBuilder()
          .setCustomId("help-menu")
          .setPlaceholder("Vui l√≤ng l·ª±a ch·ªçn danh m·ª•c")
          .setDisabled(state)
          .addOptions([
            {
              label: `Giveaways`,
              value: `giveaway`,
              description: `Xem t·∫•t c·∫£ c√°c l·ªánh li√™n quan t·ªõi Giveaway!`,
              emoji: `üéâ`,
            },
            {
              label: `Chung`,
              value: `general`,
              description: `Xem t·∫•t c·∫£ c√°c l·ªánh chung!`,
              emoji: `‚öô`,
            },
          ])
      ),
    ];

    const initialMessage = await interaction.reply({
      embeds: [embed],
      components: components(false),
    });

    const filter = (interaction) =>
      interaction.user.id === interaction.member.id;

    const collector = interaction.channel.createMessageComponentCollector({
      filter,
      componentType: ComponentType.SelectMenu,
      idle: 300000,
      dispose: true,
    });

    collector.on("collect", (interaction) => {
      if (interaction.values[0] === "giveaway") {
        interaction
          .update({ embeds: [giveaway], components: components(false) })
          .catch((e) => {});
      } else if (interaction.values[0] === "general") {
        interaction
          .update({ embeds: [general], components: components(false) })
          .catch((e) => {});
      }
    });
    collector.on("end", (collected, reason) => {
      if (reason == "time") {
        initialMessage.edit({
          content: "L·ªói khi load, vui l√≤ng th·ª≠ l·∫°i!",
          components: [],
        });
      }
    });
  },
};
