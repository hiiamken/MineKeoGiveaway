const Discord = require("discord.js");
const { ApplicationCommandOptionType } = require("discord.js");
const messages = require("../utils/message");
const ms = require("ms");
module.exports = {
  name: "start",
  description: "üéâ B·∫Øt ƒë·∫ßu m·ªôt s·ª± ki·ªán giveaway",

  options: [
    {
      name: "duration",
      description: "Th·ªùi gian di·ªÖn ra s·ª± ki·ªán giveaway. V√≠ d·ª•: 1m, 1h, 1d",
      type: ApplicationCommandOptionType.String,
      required: true,
    },
    {
      name: "winners",
      description: "S·ªë ng∆∞·ªùi chi·∫øn th·∫Øng c·ªßa s·ª± ki·ªán giveaway",
      type: ApplicationCommandOptionType.Integer,
      required: true,
    },
    {
      name: "prize",
      description: "Ph·∫ßn th∆∞·ªüng cho s·ª± ki·ªán giveaway",
      type: ApplicationCommandOptionType.String,
      required: true,
    },
    {
      name: "channel",
      description: "K√™nh ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª± ki·ªán giveaway",
      type: ApplicationCommandOptionType.Channel,
      required: true,
    },
    {
      name: "bonusrole1",
      description: "Role th·ª© nh·∫•t nh·∫≠n ph·∫ßn th∆∞·ªüng th√™m",
      type: ApplicationCommandOptionType.Role,
      required: false,
    },
    {
      name: "bonusamount1",
      description: "S·ªë l∆∞·ª£ng ph·∫ßn th∆∞·ªüng th√™m cho role th·ª© nh·∫•t",
      type: ApplicationCommandOptionType.Integer,
      required: false,
    },
    {
      name: "bonusrole2",
      description: "Role th·ª© hai nh·∫≠n ph·∫ßn th∆∞·ªüng th√™m",
      type: ApplicationCommandOptionType.Role,
      required: false,
    },
    {
      name: "bonusamount2",
      description: "S·ªë l∆∞·ª£ng ph·∫ßn th∆∞·ªüng th√™m cho role th·ª© hai",
      type: ApplicationCommandOptionType.Integer,
      required: false,
    },
    {
      name: "bonusrole3",
      description: "Role th·ª© ba nh·∫≠n ph·∫ßn th∆∞·ªüng th√™m",
      type: ApplicationCommandOptionType.Role,
      required: false,
    },
    {
      name: "bonusamount3",
      description: "S·ªë l∆∞·ª£ng ph·∫ßn th∆∞·ªüng th√™m cho role th·ª© ba",
      type: ApplicationCommandOptionType.Integer,
      required: false,
    },
    {
      name: "invite",
      description:
        "Link m·ªùi ƒë·∫øn m√°y ch·ªß b·∫°n mu·ªën ƒë·∫∑t l√†m y√™u c·∫ßu tham gia giveaway",
      type: ApplicationCommandOptionType.String,
      required: false,
    },
    {
      name: "role",
      description: "Role b·∫°n mu·ªën ƒë·∫∑t l√† y√™u c·∫ßu tham gia giveaway",
      type: ApplicationCommandOptionType.Role,
      required: false,
    },
  ],

  run: async (client, interaction) => {
    if (
      !interaction.member.permissions.has("ManageMessages") &&
      !interaction.member.roles.cache.some((r) => r.name === "Giveaways")
    ) {
      return interaction.reply({
        content:
          ":x: B·∫°n c·∫ßn c√≥ quy·ªÅn qu·∫£n l√Ω tin nh·∫Øn ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª± ki·ªán giveaway.",
        ephemeral: true,
      });
    }

    const giveawayChannel = interaction.options.getChannel("channel");
    const giveawayDuration = interaction.options.getString("duration");
    const giveawayWinnerCount = interaction.options.getInteger("winners");
    const giveawayPrize = interaction.options.getString("prize");

    if (!giveawayChannel.isTextBased()) {
      return interaction.reply({
        content: ":x: Vui l√≤ng ch·ªçn m·ªôt k√™nh vƒÉn b·∫£n!",
        ephemeral: true,
      });
    }
    if (isNaN(ms(giveawayDuration))) {
      return interaction.reply({
        content: ":x: Vui l√≤ng ch·ªçn m·ªôt th·ªùi gian h·ª£p l·ªá!",
        ephemeral: true,
      });
    }
    if (giveawayWinnerCount < 1) {
      return interaction.reply({
        content:
          ":x: Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng ng∆∞·ªùi chi·∫øn th·∫Øng h·ª£p l·ªá, l·ªõn h∆°n ho·∫∑c b·∫±ng m·ªôt.",
      });
    }

    // X·ª≠ l√Ω bonus roles
    let bonusEntriesConfig = [];
    for (let i = 1; i <= 3; i++) {
      const bonusRole = interaction.options.getRole(`bonusrole${i}`);
      const bonusAmount = interaction.options.getInteger(`bonusamount${i}`);
      if (bonusRole && bonusAmount) {
        bonusEntriesConfig.push({
          role: bonusRole, // L∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng role
          entries: bonusAmount, // L∆∞u tr·ªØ s·ªë l∆∞·ª£ng entries
          bonusFunction: new Function(
            "member",
            `return member.roles.cache.has('${bonusRole.id}') ? ${bonusAmount} : null`
          ),
          cumulative: false,
        });
      }
    }

    let rolereq = interaction.options.getRole("role");
    let invite = interaction.options.getString("invite");

    await interaction.deferReply({ ephemeral: true });
    let reqinvite;
    if (invite) {
      let invitex = await client.fetchInvite(invite);
      let client_is_in_server = client.guilds.cache.get(invitex.guild.id);
      reqinvite = invitex;
      if (!client_is_in_server) {
        const gaEmbed = {
          author: {
            name: client.user.username,
            iconURL: client.user.displayAvatarURL(),
          },
          title: "Ki·ªÉm Tra Server!",
          url: "https://github.com/hiiamken",
          description:
            "Woah woah woah! T√¥i th·∫•y m·ªôt server m·ªõi! B·∫°n ch·∫Øc ch·∫Øn r·∫±ng t√¥i c√≥ ·ªü ƒë√≥ kh√¥ng? B·∫°n c·∫ßn m·ªùi t√¥i ƒë·∫øn ƒë√≥ ƒë·ªÉ ƒë·∫∑t ƒëi·ªÅu n√†y l√†m y√™u c·∫ßu! üò≥",
          timestamp: new Date(),
          footer: {
            iconURL: client.user.displayAvatarURL(),
            text: "Ki·ªÉm Tra Server",
          },
        };
        return interaction.editReply({ embeds: [gaEmbed] });
      }
    }

    if (rolereq && !invite) {
      messages.inviteToParticipate = `**Nh·∫•n v√†o üéâ ƒë·ªÉ tham gia!**\n>>> - Ch·ªâ c√≥ th√†nh vi√™n c√≥ role ${rolereq} m·ªõi ƒë∆∞·ª£c ph√©p tham gia s·ª± ki·ªán n√†y!`;
    }
    if (rolereq && invite) {
      messages.inviteToParticipate = `**Nh·∫•n v√†o üéâ ƒë·ªÉ tham gia!**\n>>> - Ch·ªâ c√≥ th√†nh vi√™n c√≥ role ${rolereq} m·ªõi ƒë∆∞·ª£c ph√©p tham gia s·ª± ki·ªán n√†y!\n- Th√†nh vi√™n c·∫ßn tham gia [server n√†y](${invite}) ƒë·ªÉ c√≥ th·ªÉ tham gia s·ª± ki·ªán n√†y!`;
    }
    if (!rolereq && invite) {
      messages.inviteToParticipate = `**Nh·∫•n v√†o üéâ ƒë·ªÉ tham gia!**\n>>> - Th√†nh vi√™n c·∫ßn tham gia [server n√†y](${invite}) ƒë·ªÉ c√≥ th·ªÉ tham gia s·ª± ki·ªán n√†y!`;
    }

    // B·∫Øt ƒë·∫ßu s·ª± ki·ªán giveaway
    client.giveawaysManager.start(giveawayChannel, {
      duration: ms(giveawayDuration),
      prize: giveawayPrize,
      winnerCount: parseInt(giveawayWinnerCount),
      hostedBy: client.config.hostedBy ? interaction.user : null,
      bonusEntries: bonusEntriesConfig,
      // Messages
      messages,
      extraData: {
        server: reqinvite == null ? "null" : reqinvite.guild.id,
        role: rolereq == null ? "null" : rolereq.id,
      },
    });
    interaction.editReply({
      content: `Giveaway ƒë√£ b·∫Øt ƒë·∫ßu trong k√™nh ${giveawayChannel}!`,
      ephemeral: true,
    });
    // Ph·∫ßn th√¥ng b√°o v·ªÅ bonus roles
    if (bonusEntriesConfig.length > 0) {
      let bonusRolesDescriptions = bonusEntriesConfig
        .map((entry) => {
          // S·ª≠ d·ª•ng c√∫ ph√°p mention ƒë·ªÉ t·∫°o ra tag cho role
          // ƒêi·ªÅu n√†y s·∫Ω hi·ªÉn th·ªã t√™n role v·ªõi m√†u s·∫Øc t∆∞∆°ng ·ª©ng tr√™n server
          return `‚ñ∫ <@&${entry.role.id}> - x**${entry.entries}** gi·∫£i th∆∞·ªüng`;
        })
        .join("\n");

      let giveaway = new Discord.EmbedBuilder()
        .setAuthor({ name: `Bonus:` })
        .setDescription(bonusRolesDescriptions)
        .setColor("#EFB2FB")
        .setTimestamp();
      giveawayChannel.send({ embeds: [giveaway] });
    }
  },
};